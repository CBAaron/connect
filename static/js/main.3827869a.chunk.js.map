{"version":3,"sources":["context/web3.js","hooks/useRegistry.js","app.js","utils/providerUrl.js","index.js"],"names":["disconnectWeb3","a","console","log","defaultState","Object","freeze","data","error","undefined","loading","App","useState","modalVisible","setModalVisible","signMessage","setSignMessage","connectRef","useRef","handleConnect","useCallback","connector","WalletConnect","bridge","qrcodeModal","open","close","current","connected","createSession","on","payload","params","React","state","setState","useEffect","fetch","result","json","values","useMobileRegistry","postMessageHelper","message","type","window","ReactNativeWebView","postMessage","handleSignMessage","msgParams","accounts","signPersonalMessage","then","JSON","stringify","catch","View","style","styles","app","ScrollView","header","Text","title","Button","onPress","killSession","Modal","visible","filter","f","mobile","universal","map","name","TouchableOpacity","key","width","uri","walletService","universalLink","native","formatProviderUrl","encodeURIComponent","handleProviderUrl","padding","renderModal","StyleSheet","create","marginHorizontal","maxWidth","logo","height","fontWeight","fontSize","marginVertical","textAlign","text","lineHeight","link","color","code","fontFamily","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":"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","file":"static/js/main.3827869a.chunk.js","sourcesContent":["// import React from 'react'\n// import WalletConnect from \"@walletconnect/client\";\n// import QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport { View, Text } from \"react-native\";\n\n// import WalletConnectProvider from '@walletconnect/web3-provider'\n// import { providers } from 'ethers'\n// import WalletLink from 'walletlink'\n// import Web3Modal from 'web3modal'\n\n// const INFURA_ID = '460f40a260564ac4a4f4b3fffb032dad'\n\n// const providerOptions = {\n//   walletconnect: {\n//     package: WalletConnectProvider, // required\n//     options: {\n//       infuraId: INFURA_ID, // required\n//     },\n//   },\n//   'custom-walletlink': {\n//     display: {\n//       logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',\n//       name: 'Coinbase',\n//       description: 'Connect to Coinbase Wallet (not Coinbase App)',\n//     },\n//     options: {\n//       appName: 'Coinbase', // Your app name\n//       networkUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n//       chainId: 1,\n//     },\n//     package: WalletLink,\n//     connector: async (_, options) => {\n//       const { appName, networkUrl, chainId } = options\n//       const walletLink = new WalletLink({\n//         appName,\n//       })\n//       const provider = walletLink.makeWeb3Provider(networkUrl, chainId)\n//       await provider.enable()\n//       return provider\n//     },\n//   },\n// }\n\n// let web3Modal;\n// let provider;\n\n// if (typeof window !== 'undefined') {\n//   web3Modal = new Web3Modal({\n//     network: 'mainnet', // optional\n//     cacheProvider: true,\n//     providerOptions, // required\n//   })\n// }\n\n// const connectWeb3 = async function() {\n//   // const provider = await web3Modal.connect();\n//   // console.log(provider)\n//   //  // We plug the initial `provider` into ethers.js and get back\n//   //  // a Web3Provider. This will add on methods from ethers.js and\n//   //  // event listeners such as `.on()` will be different.\n//   //  const web3Provider = new providers.Web3Provider(provider)\n\n//   //  const signer = web3Provider.getSigner()\n//   //  const address = await signer.getAddress()\n\n//   //  const network = await web3Provider.getNetwork()\n   \n//   //  console.log({ provider, web3Provider, network, address });\n   \n//   //  return { provider, web3Provider, network, address };\n\n//   const connector = new WalletConnect({\n//     bridge: \"https://bridge.walletconnect.org\", // Required\n//     qrcodeModal: QRCodeModal, //() => <View style={{flex:1, backgroundColor: 'red'}}><Text>test UI</Text></View>,\n//   });\n\n//   if (!connector.connected) {\n//     // create new session\n//     connector.createSession();\n//   }\n\n//   console.log(connector);\n// };\n\nconst disconnectWeb3 = async function () {\n  // await web3Modal.clearCachedProvider()\n  // if (provider?.disconnect && typeof provider.disconnect === 'function') {\n  //   await provider.disconnect()\n  // }\n  console.log('dis')\n};\n\nexport { disconnectWeb3 }\n","import React from \"react\";\n\nconst defaultState = Object.freeze({\n  data: [],\n  error: undefined,\n  loading: true,\n});\n\nconst useMobileRegistry = () => {\n  const [state, setState] = React.useState(defaultState);\n  React.useEffect(() => {\n    (async () => {\n      try {\n        const result = await fetch(\n          \"https://registry.walletconnect.org/data/wallets.json\"\n        );\n        const data = await result.json();\n        setState({\n          data: Object.values(data),\n          error: undefined,\n          loading: false,\n        });\n      } catch (error) {\n        console.error(error);\n        setState({ ...defaultState, error: error, loading: false });\n      }\n    })();\n  }, [setState]);\n  return state;\n};\n\nexport { useMobileRegistry };\n","import React, {useCallback, useState, useRef} from \"react\";\nimport { Button, StyleSheet, Text, View, Modal } from \"react-native\";\nimport { connectWeb3, disconnectWeb3 } from \"./context/web3\";\nimport WalletConnect from \"@walletconnect/client\";\nimport { useMobileRegistry } from \"./hooks/useRegistry\";\nimport { formatProviderUrl } from \"./utils/providerUrl\";\nimport { ScrollView, TouchableOpacity } from \"react-native-web\";\n\n\nfunction Link(props) {\n  return (\n    <Text\n      {...props}\n      accessibilityRole=\"link\"\n      style={StyleSheet.compose(styles.link, props.style)}\n    />\n  );\n}\n\nfunction App() {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [signMessage, setSignMessage] = useState(false);\n  \n  const connectRef = useRef(null)\n\n  const handleConnect = useCallback(async() => {\n    // const {address} = await connectWeb3();\n    // setAdd(address.toString());\n    // setModalVisible(true)\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\", // Required\n      qrcodeModal: {\n        open: () => setModalVisible(true),\n        close: () => setModalVisible(false),\n      }\n    });\n\n    connectRef.current = connector;  \n\n    setModalVisible(true)\n\n  \n    if (!connector.connected) {\n      // create new session\n      connector.createSession();\n    }\n\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n\n      setSignMessage(true);\n\n\n      console.log(payload.params[0])\n    });\n\n\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n\n      setSignMessage(false);\n      setModalVisible(false);\n    });\n  }, [])\n\n  const handleDisconnect = useCallback(() => {\n    disconnectWeb3();\n    setModalVisible(false)\n  }, [])\n\n  const { data } = useMobileRegistry();\n\n  const postMessageHelper = (message, type) => { \n    if (window.ReactNativeWebView) {\n      window.ReactNativeWebView.postMessage(`${type}@:@${message}`);\n    }\n  }\n\n  \n  const handleProviderUrl = (mobile) => {\n    const { uri } = connectRef.current;\n    \n    const redirectUrl = 'coinbase://';\n    postMessageHelper(`${formatProviderUrl(mobile)}/wc?uri=${encodeURIComponent(uri)}&redirectUrl=${redirectUrl}`, 'connect');\n    \n    // close wallet modal\n    setModalVisible(false);\n  }\n\n  const handleSignMessage = () => {\n    if(!connectRef.current) {\n      console.log('we lost our connection');\n    }\n\n    const message = \"Coinbase message - Lets go\";\n\n    const msgParams = [\n      message, // Required\n      connectRef.current.accounts[0], // Required\n    ];\n\n        // Sign personal message\n    connectRef.current\n    .signPersonalMessage(msgParams)\n    .then((result) => {\n      // Returns signature.\n      console.log({result});\n      \n      postMessageHelper(JSON.stringify(result), 'sign')\n    \n      \n      \n      setSignMessage(false)\n      \n    })\n    .catch((error) => {\n      // Error returned when rejected\n      console.error({error});\n    });\n  }\n\n  const renderModal = (data) => {    \n    return (\n      <Modal visible={modalVisible}>\n        <Button onPress={() => setModalVisible(false)} title=\"close\" />\n        \n        {data.filter(f => !!f.mobile.universal).map(({name, mobile}) => <TouchableOpacity key={name} style={{width: 100}} onPress={() => handleProviderUrl(mobile)}><Text style={{padding: 10}} >{name}</Text></TouchableOpacity>)}\n      </Modal>\n    );\n  }\n\n  const renderSignModal = () => {\n    return (\n      <Modal visible={modalVisible}>\n        <Button onPress={handleSignMessage} title=\"Sign Message\" />\n      </Modal>\n    );\n  }\n\n  return (\n    <View style={styles.app}>\n      <ScrollView>\n      <View style={styles.header}>\n        <Text style={styles.title}>Connect Self hosted wallet</Text>\n      </View>\n      </ScrollView>\n      {connectRef.current?.connected ? <Button onPress={() => connectRef.current.killSession()} title=\"disconnect\" /> : <Button onPress={handleConnect} title=\"Connect\" />}\n      {connectRef.current?.connected && renderSignModal()}\n      {modalVisible && !signMessage && renderModal(data)}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  app: {\n    marginHorizontal: \"auto\",\n    maxWidth: 500\n  },\n  logo: {\n    height: 80\n  },\n  header: {\n    padding: 20\n  },\n  title: {\n    fontWeight: \"bold\",\n    fontSize: \"1.5rem\",\n    marginVertical: \"1em\",\n    textAlign: \"center\"\n  },\n  text: {\n    lineHeight: \"1.5em\",\n    fontSize: \"1.125rem\",\n    marginVertical: \"1em\",\n    textAlign: \"center\"\n  },\n  link: {\n    color: \"#1B95E0\"\n  },\n  code: {\n    fontFamily: \"monospace, monospace\"\n  }\n});\n\nexport { App };\n\n","// import { Platform } from \"react-native\";\n\nconst formatProviderUrl = (walletService) => {\n\n    const { universal: universalLink, native: deepLink } = walletService;\n    \n    // if (Platform.OS === \"android\") {\n    //     return `${deepLink}`;\n    // }\n    \n    return `${universalLink}`;\n}\n\nexport {formatProviderUrl}","import { AppRegistry } from \"react-native\";\nimport {App}  from \"./app.js\";\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});\n\n"],"sourceRoot":""}